---
layout: post
title: This blog
subtitle: From creation to deployment
date: 2021-02-18 07:01 -0600
background: 'https:////images.unsplash.com/photo-1493217465235-252dd9c0d632?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80'
published: false
---

I started by leafing through random website github repos of software engineers and UX designers, until I found a theme that I liked. 
I briefly considered making my own theme, but found myself less interested in working on the visual details and interaction of the page than actually getting the blog up. A theme would have all of that already, so I chose to go that route. <br/>
I liked a blog that had a backdrop image, placed posts on the forefront, and was relatively minimal. An available theme that met those criteria was [StartBootstrap/startbootstrap-clean-blog-jekyll](https://www.google.com/search?client=firefox-b-1-d&q=StartBootstrap%2Fstartbootstrap-clean-blog-jekyll+). I found a Medium article that detailed how to [Create a blog for Jekyll and Github pages] (https://medium.com/20percentwork/creating-your-blog-for-free-using-jekyll-github-pages-dba37272730a) and proceeded to hit the most time consuming step- learning about ruby and gems dependencies because compiles kept failing. <br/>
After consulting like 5 stack overflow posts, I realized there were two versions of ruby installed on my machine, and the wrong one was being referenced each time I tried to compile. I changed the path of the ruby being called so that it led to the more recent version, and then deleted the old version of ruby, which fixed the problem. Once I pulled the gem for the theme I liked and replaced the default jekyll theme with it, and ran `bundle exec jekyll serve`.  Setup was instantaneous and the result on my local machine as beautiful. I had this endorphin rush just looking at my pretty blog. <br/>
But then, the site refused to build correctly on github pages. Only the jekyll front matter was showing- it looked like jekyll was not rendering html pages properly as it should be. I thought it might have something to do with the jekyll cache and read from another developer's comments that adding an empty `.nojekyll` file was essential to bypass the cached files. <br/>
So I went for a fix that I did not fully research. Without a clear idea what `.nojekyll` did, I added that in because of a highly-voted answer that made it sound like githug-pages necessitated the presence of this file and thought of it like a common `.gitignore` file. <br/>
The build still wasn't working. After a couple of hours of staring at random posts with keywords such as 'front matter', 'jekyll not working', 'github pages not working', I went back to the fundamentals and thoroughly read the actual [GitHub documentation] ('https://docs.github.com/en/github/working-with-github-pages/about-github-pages'), and in the <em>Static site generator</em> section which is exactly what my system is, it clearly says 
> GitHub Pages will use Jekyll to build your site by default. If you want to use a static site generator other than Jekyll, disable the Jekyll build process by creating an empty file called .nojekyll in the root of your publishing source, then follow your static site generator's instructions to build your site locally. <br/>

I needed Jekyll to build my site and had added a `.nojekyll` file which blocks Jekyll from building itü§¶‚Äç‚ôÄÔ∏è. Now that it's removed, my site correctly deploys.
This is the kind of timesink that I have realized I fall into frequently. I run into an error, look for fixes, implement said fixes, fix the original problem but introduce a new problem, and try to fix that. Luckily, this resolved itself quickly. I find that I actually need to confirm that I understand everything about the code that I write. Sometimes, when the problem comes from an unexpected place in a vast system, this takes longer, but that's what experience is for. 
In the process of reading through github documentation, I've found that the size of my static site is limited (well duh) and I'll have to find ways to reduce the size of my files continuously. Instead of having static images saved in my assets folder in the repo, I have chosen to link directly to images online so that they get called in the build process, online. I threw all the jekyll cache-related things in the gitignore so that they don't get uploaded to the repo. New solutions will have to be found as I continue writing, but that's expected of software development.

Then I realized the 'contact' tab was pointless- I needed to sign up to an email service in order for it to work, and I couldn't imagine people actually using it to email me. However, once I tried to get rid of it, it quickly became apparent that it was part of the theme template. Basically, there was no way around it, unless I went through StartBootstrap's Clean Blog codebase and pulled all the code I needed into my codebase where I would have the freedom to make changes I wanted. 
So I went through each of the files, identifying what each of them did. It looked like the Gemfile listed necessary references, and the gulpfile was what triggered the whole build. So I needed to keep those.
On the other hand, the package.json and package.lock.json looked like version control files and the jekyll-theme-clean-blog.gemspec file was obviously for deployment of the template for others to use. I'm not sure what _includes is, but _layouts is quite literally the layouts of the jekyll pages, _posts are my posts, _sass contains organization of all the styles, and _site is autogenerated each time I run `jekyll serve`. I'm not sure what assets are. 