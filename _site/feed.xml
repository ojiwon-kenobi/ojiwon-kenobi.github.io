<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://ojiwon-kenobi.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ojiwon-kenobi.github.io/" rel="alternate" type="text/html" /><updated>2021-03-31T20:39:11-05:00</updated><id>https://ojiwon-kenobi.github.io/feed.xml</id><title type="html">badabing badaboom</title><subtitle> </subtitle><entry><title type="html">Applications of AI in the analysis of brain signals</title><link href="https://ojiwon-kenobi.github.io/2021/02/19/applications-of-ai-in-analysis-of-brain-signals.html" rel="alternate" type="text/html" title="Applications of AI in the analysis of brain signals" /><published>2021-02-19T07:51:00-06:00</published><updated>2021-02-19T07:51:00-06:00</updated><id>https://ojiwon-kenobi.github.io/2021/02/19/applications-of-ai-in-analysis-of-brain-signals</id><content type="html" xml:base="https://ojiwon-kenobi.github.io/2021/02/19/applications-of-ai-in-analysis-of-brain-signals.html">&lt;p&gt;This post is a general summary of &lt;a href=&quot;https://pubmed.ncbi.nlm.nih.gov/33171452/&quot;&gt;A survey on deep learning-based non-invasive brain signals: recent advances and new frontiers &lt;/a&gt;, written in November 2020 by Zhang et al. It’s a 42-page paper with thorough detail and insight about how AI is playing a role in the emerging field of non-invasive brain-signal analysis using deep learning techniques.&lt;/p&gt;

&lt;p&gt;The intended audience for this paper may be researchers with backgrounds in biology and/or neuroscience who want to apply deep learning in their research, and researchers with backgrounds in computer science interested in brain signal research.&lt;/p&gt;

&lt;h3 id=&quot;i-introduction&quot;&gt;I. Introduction&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Invasive signals&lt;/strong&gt; refer to signals collected through electrodes beneath the scalp, and &lt;strong&gt;non-invasive&lt;/strong&gt;, signals collected through electrodes upon the scalp. This paper focuses on non-invasive brain signals.
Non-invasive signals are comparably low fidelity, the Signal-to-Noise Ratio (SNR) being only approximately 5% of the original brain signals collected. 
Non-invasive collection methods can be electrical, magnetic, or metabolic, which include Electroencephalogram (EEG), Functional near-infrared spectroscopy (fNIRS), Functional magnetic resonance imaging (fMRI), and Magnetoencephalography (MEG). 
The traditional workflow has been the following: &lt;img src=&quot;https://i.ibb.co/pygxV87/Screen-Shot-2021-02-20-at-8-01-56-PM.png&quot; alt=&quot;a&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Collect brain signals&lt;/li&gt;
  &lt;li&gt;Preprocess the collection&lt;/li&gt;
  &lt;li&gt;Extract features&lt;/li&gt;
  &lt;li&gt;Classify &lt;br /&gt;
5a. Analyze &lt;br /&gt;
5b. Send to BCI (such as a prosthesis or a smart device) to control equipment –&amp;gt; step 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before deep learning, there were traditional classifiers dependent on domain knowledge. There were three associated difficulties with this approach:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Brain signals are easily corrupted by various biological and environmental factors.&lt;/li&gt;
  &lt;li&gt;Low SNR is not easily addressed.&lt;/li&gt;
  &lt;li&gt;Feature extraction depends on domain expertise, meaning researchers needed backgrounds in biology and neuroscience. The amount of domain expertise one had would easily impact research outcomes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Incorporating deep learning into brain signal applications has addressed the difficulties above and offer two more advantages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using DL saves time as there is no need for preprocessing and feature extraction (this is all done within deep learning models)&lt;/li&gt;
  &lt;li&gt;Deep neural networks can capture both representative high-level features and latent dependencies through deep structures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ii-deep-learning-models&quot;&gt;II. Deep learning models&lt;/h3&gt;
&lt;p&gt;Supervised learning models take in a labeled dataset to learn and improve accuracy. Unsupervised models try to make sense of datasets on their own by extracting features and patterns. &lt;strong&gt;Discriminative Models&lt;/strong&gt; are supervised learning models. Examples include multi-layer perceptrons(MLP), recurrent neural networks (RNN), and convolutional neural networks (CNN). They take in a dataset to extract features and classify samples. &lt;strong&gt;Representative models&lt;/strong&gt; are unsupervised learning models, which include autoencoders (AE), restricted Boltzmann machine (RBM), and deep belief networks (DBN). They take in a dataset as input and can output a representation after extracting features. &lt;strong&gt;Generative Models&lt;/strong&gt; are slightly different from the past two in that their main job is not to classify, but to generate data as their name implies. Variational Autoencoders (VAE) and generative adversarial networks (GAN) can output new samples and reconstruct missing data. &lt;strong&gt;Hybrid Models&lt;/strong&gt; combine more than two of the aforementioned models, typical combinations being a representation model for feature extraction with a discriminative model for classification.&lt;/p&gt;

&lt;h3 id=&quot;iii-state-of-the-art-dl-techniques-for-brain-signals&quot;&gt;III. State-of-the-art DL techniques for brain signals&lt;/h3&gt;
&lt;p&gt;Below are publications’ subject brain signals and deep learning models. 
&lt;img src=&quot;https://i.ibb.co/j5YyrvD/Screen-Shot-2021-02-21-at-4-37-16-PM.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;a-eeg&quot;&gt;A) EEG&lt;/h5&gt;
&lt;h6 id=&quot;spontaneous-eeg-naturally-occurring-signals-as-opposed-to-evoked&quot;&gt;Spontaneous EEG: naturally-occurring signals as opposed to evoked&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;Sleep EEG: signal data can be used to recognize sleep stages (refer to R&amp;amp;K rules or AASM recommendations) and to diagnose sleep disorders
    &lt;ul&gt;
      &lt;li&gt;Discriminative: CNN&lt;/li&gt;
      &lt;li&gt;Representative: DBN-RBM&lt;/li&gt;
      &lt;li&gt;Hybrid: CNN &amp;amp; MLP, CNN &amp;amp; LSTM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Motor Imagery EEG: mental imagery of making a movement
    &lt;ul&gt;
      &lt;li&gt;Discriminative: CNN, 2-D CNN, LSTM, MLP&lt;/li&gt;
      &lt;li&gt;Representative: D-AE, DBN-AE, DBN-RBM&lt;/li&gt;
      &lt;li&gt;Generative: VAE&lt;/li&gt;
      &lt;li&gt;Hybrid: CNN &amp;amp; LSTM, Repre+ Discri&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Emotional EEG: evaluation of emotions by measuring valence, arousal, and dominance
    &lt;ul&gt;
      &lt;li&gt;Discriminative: RNN, CNN, MLP&lt;/li&gt;
      &lt;li&gt;Representative: DBN-RBM, RBM-AE, DBN-RBM+SVM+HMM, SAAE&lt;/li&gt;
      &lt;li&gt;Hybrid: RNN&amp;amp;MLP, D-AE&amp;amp;MLP, DBN&amp;amp;RBM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mental Disease EEG: diagnosis of mental diseases (epileptic seizures, depression, Alzheimer’s, Parkinson’s)
    &lt;ul&gt;
      &lt;li&gt;Discriminative: CNN, RNN&lt;/li&gt;
      &lt;li&gt;Representative: DBN-RBM, sparse D-AE&lt;/li&gt;
      &lt;li&gt;Hybrid: CNN &amp;amp; RNN, CNN &amp;amp; LSTM, MLP, C-AE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Augmentation
    &lt;ul&gt;
      &lt;li&gt;Generative: GAN can augment data to increase classification accuracy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;evoked-potentials&quot;&gt;Evoked Potentials&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;(EP)/(ERP): event-related voltage changes due to outside stimuli in ongoing EEG activity that are time-locked to sensory, motor, and cognitive events
    &lt;ul&gt;
      &lt;li&gt;VEP (visual evoked potential)
        &lt;ul&gt;
          &lt;li&gt;DBN-RBM, 2D CNN, LSTM, DBN-RBM, SVM classifier, AE model, CNN&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;AEP (auditory evoked potential)
        &lt;ul&gt;
          &lt;li&gt;CNN&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;RSVP (rapid serial visual presentation)
        &lt;ul&gt;
          &lt;li&gt;CNN, MLP, DBN, DBN-AED-AE&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SSEP:
    &lt;ul&gt;
      &lt;li&gt;SSVEP (steady state visual evoked potential): brain oscillation evoked by flickering visual stimuli
        &lt;ul&gt;
          &lt;li&gt;CNN, RNN DBN-RBM, DBN-AE, MLP&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;b-fnirs&quot;&gt;B) fNIRS&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Discriminative: CNN, MLP&lt;/li&gt;
  &lt;li&gt;Representative: AE, DBN-RBM, DBN-AE&lt;/li&gt;
  &lt;li&gt;Generative: convolutional GAN, DCGAN, WGAN&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;c-eg&quot;&gt;C) EG&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;1-D CNN, CNN&amp;amp;MLP&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iv-guidelines-on-choosing-appropriate-dl-models&quot;&gt;IV. Guidelines on choosing appropriate DL models&lt;/h3&gt;
&lt;p&gt;Classification of sleep EEG mainly utilizes discriminative and hybrid models including CNNs and RNNs. MI EEG is most significantly researched using CNN and CNN-based hybrid models. Latent features of MI EEG signals are captured using representative models such as DBN-RBM. Emotional EEG mostly use DBN-RBM for unsupervised feature learning. Mental disease diagnosis is largely a binary classification problem, which makes it easier for models to achieve accuracy greater than 90%. CNN and D-AE are prevalent likely because both deep learning models are well known for their effective classification and dimensionality reduction. In comparison, there are fewer deep learning studies on fNIRS images even though fNIRS also is known for its high portability and low cost.&lt;/p&gt;
&lt;h6 id=&quot;discriminative&quot;&gt;Discriminative&lt;/h6&gt;
&lt;p&gt;The reason CNN is so prevalent is likely because of its outstanding performance in feature learning. CNN is powerful enough to extract latent discriminative features and spatial dependencies from EEG signals for classification. It is also an extremely popular model in popular research areas such as computer vision, which studies how computers can gain insight from images or videos. Because some brain signal diagrams (e.g. fMRI) are 2D images anyways, they can be used as input to CNNs without much work. CNNs also have plenty of variations that can be adapted to different scenarios.&lt;/p&gt;

&lt;p&gt;A question that may follow is, “but couldn’t RNNs be just as popular as a methodology? Aren’t brain signals technically sequential, temporal information which is what RNNs are great at processing?” RNNs take a long time processing longer sequences (e.g. brain signals), and although depending on the situation, RNNs may take up more than 20 times the training time than CNN may. However, RNNs are promising in detecting epileptic seizures due to their excellent temporal dependency searching ability. By definition, spatial data is better analyzed by CNNs and temporal data, by RNNs.&lt;/p&gt;

&lt;h6 id=&quot;representative&quot;&gt;Representative&lt;/h6&gt;
&lt;p&gt;DBNs, particularly DBN-RBMs, are most popular for feature extraction likely because DBNs learn the generative parameters that reveal the relationship between variables in neighboring layers efficiently. DBNs also make the calculation of the latent variables(hidden variables in hidden layers) straightforward. However, most of the work using the DBN-RBM model was done before 2016. At the moment, most studies use CNN and hybrid models for both feature learning and classification.&lt;/p&gt;

&lt;h6 id=&quot;generative&quot;&gt;Generative&lt;/h6&gt;
&lt;p&gt;These are rare and are prevalent in data augmentation and reconstruction in fMRI and EEG signals.&lt;/p&gt;

&lt;h6 id=&quot;hybrid&quot;&gt;Hybrid&lt;/h6&gt;
&lt;p&gt;RNN and CNN combos are incredibly popular for their excellent temporal and spatial feature extraction. CNN and MLP combos can also extract spatial features and classify. The generic combo of representative and discriminative models (e.g. CNN+ AE, CNN+ DBN-RBM)is also popular as the former refine features and the latter classifies.&lt;/p&gt;

&lt;h3 id=&quot;v-open-issues&quot;&gt;V. Open Issues&lt;/h3&gt;
&lt;p&gt;Although deep learning has solved a lot of the performance issues of brain signal systems, there are still challenges including implementing an explainable general framework, subject-independent classification, semi-supervised and unsupervised classification, online implementation, and portability. 
&lt;strong&gt;General frameworks&lt;/strong&gt; need to be able to handle brain signals regardless of the number of channels used for signal collection, the sample dimensions, and stimulation types. They need two key capabilities: an attention mechanism, which would guarantee that the framework can focus on the most valuable parts of input signals, and the ability to capture latent features.&lt;/p&gt;</content><author><name></name></author><summary type="html">This post is a general summary of A survey on deep learning-based non-invasive brain signals: recent advances and new frontiers , written in November 2020 by Zhang et al. It’s a 42-page paper with thorough detail and insight about how AI is playing a role in the emerging field of non-invasive brain-signal analysis using deep learning techniques.</summary></entry><entry><title type="html">How to make a blog</title><link href="https://ojiwon-kenobi.github.io/2021/02/18/making-this-blog.html" rel="alternate" type="text/html" title="How to make a blog" /><published>2021-02-18T07:01:00-06:00</published><updated>2021-02-18T07:01:00-06:00</updated><id>https://ojiwon-kenobi.github.io/2021/02/18/making-this-blog</id><content type="html" xml:base="https://ojiwon-kenobi.github.io/2021/02/18/making-this-blog.html">&lt;p&gt;Blogs! They’re a great way to showcase thoughts and ideas. I created this blog to create blogposts about my side-projects and hobbies.
I started by leafing through random github repos of software engineers and UX designers, until I found a theme that I liked. &lt;a href=&quot;https://www.google.com/search?client=firefox-b-1-d&amp;amp;q=StartBootstrap%2Fstartbootstrap-clean-blog-jekyll+&quot;&gt;StartBootstrap/startbootstrap-clean-blog-jekyll&lt;/a&gt; had everything I wanted- minimalist design, a backdrop image, and placement of posts on the front page. 
And then setup was pretty straightforward.&lt;/p&gt;

&lt;h4 id=&quot;i-install-ruby-and-jekyll&quot;&gt;I. Install Ruby and Jekyll&lt;/h4&gt;
&lt;p&gt;Ruby is a programming language, and jekyll is your trusty site generator that depends on Ruby to run.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install Ruby by following one of the suggestions in the &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;Ruby Installation Guidelines&lt;/a&gt;. Check if it was installed by running&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;in your terminal/powershell/cmdline/etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Installing ruby should also install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt;, which is both the term for libraries/pkgs used in Ruby, and is also the command you can use to manipulate RubyGems, which basically is another cmdline tool to manipulate gems. Check that gem was installed by running&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem -v&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jekyll is a gem that will be the foundation for your blog. Install jekyll by running&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll bundler&lt;/code&gt;&lt;/p&gt;

    &lt;details&gt;
 &lt;summary&gt;Common problem&lt;/summary&gt;
    If you run into errors, prepare to spend some time fixing the dependencies between ruby, gem, and jekyll. For me, compilation was failing because there were two versions of ruby installed on my machine. The wrong one was being referenced each time I tried to compile. I changed the path of the ruby being called so that it led to the more recent version, and then deleted the old version of ruby, which fixed the problem.
 &lt;/details&gt;

    &lt;p&gt;Make sure you installed it by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll -v&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;ii-create-a-blog-with-jekyll-and-deploy-it-locally&quot;&gt;II. Create a blog with Jekyll and deploy it locally.&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You can create your own Jekyll blog by running&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new &amp;lt;blogName&amp;gt;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This blog will use the default Jekyll theme called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; but you can change the theme by replacing the theme in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; file. More to come on that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;in your shell/cli/terminal/powershell, and go to the server address the build states (it’ll probably be http://127.0.0.1:4000/)    and voila, you have your blog.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;iii-personalize-your-blog&quot;&gt;III. Personalize your blog&lt;/h4&gt;
&lt;p&gt;If you choose to build your own blog with custom interactions and design, this section won’t help you very much.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If you decide to use a theme, go to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; which should’ve been automatically created when you first ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new &amp;lt;blogname&amp;gt;&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; maintains all the gems you need for your site to load properly. Not only will it include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; since your site needs Jekyll to run, but it will also include the default theme, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;. Replace it with the gem of a theme of your choice, and the website will render in that theme automatically.&lt;/li&gt;
  &lt;li&gt;However, further personalization requires another step. It’s likely that if you are using a theme from a gem, you won’t be able to personalize it very much. Think of a gem, or any library or package as a building made out of legos. You can’t just yank out a lego- it’s built in. So in order to have more control and freedom over your blog, you’re going to have to take the source code which open-source themes will offer, and refactor it. &lt;br /&gt;
    &lt;details&gt;
     &lt;summary&gt; Customization in this blog &lt;/summary&gt;
     For myself, I didn't want the 'contact' tab. It was broken when I first deployed my blog locally, and for it to work, I needed to sign up to an email service. Having a broken feature on the UI seemed like a big flaw on my blog, so I decided to take it out. (I also wanted to change the font and some of the layout templates). &lt;br /&gt;
     So find out what files do what. What I did, was I found out that there were files that were specifically there to make the theme a gem, and files that actually made up the blog and its features. I just needed to keep the latter. 
     Another customization that a lot of people (myself included) like to do is on the css files. It's there you can control most of the visual aspects of your blog, such as font size and type, margin, kerning, etc. Most themes employ bootstrap which has its own css file that the build generates and uses. If you want to override this, &lt;a href=&quot;https://stackoverflow.com/questions/8596794/customizing-bootstrap-css-template&quot;&gt; do not modify the bootstrap.css file, and instead, create your own css file and place its reference beneath the reference to the bootstrap.css file &lt;/a&gt;
 &lt;/details&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;iv-deploy-to-github&quot;&gt;IV. Deploy to github&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Push your branch to github in a repo that is specifically named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-github-username&amp;gt;.github.io&lt;/code&gt;. This is how Github will understand this is going to be your personal website and will render it as so.&lt;/li&gt;
  &lt;li&gt;Wait a bit- grab some coffee or water, and then head over to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https:&amp;lt;your-github-username&amp;gt;.github.io&lt;/code&gt;. You’ll be able to see your neat new blog. (You also might get a nice email from github saying if it was a success or a failure.)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;v-writing-posts&quot;&gt;V. Writing posts&lt;/h4&gt;
&lt;p&gt;When you first create your site by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new &amp;lt;blogname&amp;gt;&lt;/code&gt;, you’ll find that there will be a number of folders created with underscores in front of their names, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt;. This folder structure is what jekyll needs to build your site.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a test post to make sure things work. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder, create a markdown file with the title formatted in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-title.markdown&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Jekyll takes markdown content and passes it through templates indicated in the YAML front-matter block at the top of each page. This specific page also has a front-matter block:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title: How to make a blog
subtitle: From creation to deployment
date: 2021-02-18 07:01 -0600
background: 'https:////images.unsplash.com/photo-1493217465235-252dd9c0d632?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80'
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The first line indicates to Jekyll that this page should be rendered as a post defined in the layouts, which is the folder houses all the templates. Add the front-matter block to the top of your file with the details about layout and title at the very minimum.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;. You should see your post hosted as a static page in your blog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that’s it 👏&lt;/p&gt;</content><author><name></name></author><summary type="html">Blogs! They’re a great way to showcase thoughts and ideas. I created this blog to create blogposts about my side-projects and hobbies. I started by leafing through random github repos of software engineers and UX designers, until I found a theme that I liked. StartBootstrap/startbootstrap-clean-blog-jekyll had everything I wanted- minimalist design, a backdrop image, and placement of posts on the front page. And then setup was pretty straightforward.</summary></entry><entry><title type="html">Hello World.</title><link href="https://ojiwon-kenobi.github.io/2021/02/12/Hello-World.html" rel="alternate" type="text/html" title="Hello World." /><published>2021-02-12T21:07:21-06:00</published><updated>2021-02-12T21:07:21-06:00</updated><id>https://ojiwon-kenobi.github.io/2021/02/12/Hello-World</id><content type="html" xml:base="https://ojiwon-kenobi.github.io/2021/02/12/Hello-World.html">&lt;p&gt;&lt;strong&gt;Hello world&lt;/strong&gt;, this is my first Jekyll blog &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, #{name}&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hello, World' to STDOUT.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# create a post&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# deploy locally&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Hello world, this is my first Jekyll blog post.</summary></entry></feed>